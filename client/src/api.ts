/* tslint:disable */
/* eslint-disable */
/**
 * Babylon
 * Babylon is a platform for crowd translation.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface Comment
 */
export interface Comment {
    /**
     * The author\'s user id
     * @type {string}
     * @memberof Comment
     */
    author?: string;
}
/**
 * 
 * @export
 * @interface InlineResponse200
 */
export interface InlineResponse200 {
    /**
     * 
     * @type {Array<InlineResponse200Languages>}
     * @memberof InlineResponse200
     */
    languages?: Array<InlineResponse200Languages>;
}
/**
 * 
 * @export
 * @interface InlineResponse200Languages
 */
export interface InlineResponse200Languages {
    /**
     * 
     * @type {string}
     * @memberof InlineResponse200Languages
     */
    language?: string;
    /**
     * 
     * @type {Array<InlineResponse200Phrases>}
     * @memberof InlineResponse200Languages
     */
    phrases?: Array<InlineResponse200Phrases>;
}
/**
 * 
 * @export
 * @interface InlineResponse200Phrases
 */
export interface InlineResponse200Phrases {
    /**
     * 
     * @type {string}
     * @memberof InlineResponse200Phrases
     */
    key?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse200Phrases
     */
    value?: string;
}
/**
 * 
 * @export
 * @interface Phrase
 */
export interface Phrase {
    /**
     * 
     * @type {number}
     * @memberof Phrase
     */
    phraseId?: number;
    /**
     * 
     * @type {number}
     * @memberof Phrase
     */
    projectId?: number;
    /**
     * The key used to identify a phrase
     * @type {string}
     * @memberof Phrase
     */
    key?: string;
    /**
     * 
     * @type {Array<Translation>}
     * @memberof Phrase
     */
    translations?: Array<Translation>;
}
/**
 * 
 * @export
 * @interface Project
 */
export interface Project {
    /**
     * 
     * @type {number}
     * @memberof Project
     */
    projectId?: number;
    /**
     * The id of the parent project
     * @type {number}
     * @memberof Project
     */
    parent?: number;
    /**
     * 
     * @type {string}
     * @memberof Project
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof Project
     */
    description?: string;
}
/**
 * 
 * @export
 * @interface Proposal
 */
export interface Proposal {
    /**
     * 
     * @type {number}
     * @memberof Proposal
     */
    proposalId?: number;
    /**
     * 
     * @type {number}
     * @memberof Proposal
     */
    projectId?: number;
    /**
     * 
     * @type {string}
     * @memberof Proposal
     */
    author?: string;
    /**
     * 
     * @type {number}
     * @memberof Proposal
     */
    created?: number;
    /**
     * 
     * @type {ProposalStatus}
     * @memberof Proposal
     */
    status?: ProposalStatus;
    /**
     * 
     * @type {string}
     * @memberof Proposal
     */
    key?: string;
    /**
     * RFC 5646
     * @type {string}
     * @memberof Proposal
     */
    language?: string;
    /**
     * 
     * @type {string}
     * @memberof Proposal
     */
    template?: string;
    /**
     * 
     * @type {Project}
     * @memberof Proposal
     */
    formatting?: Project;
    /**
     * 
     * @type {Votes}
     * @memberof Proposal
     */
    votes?: Votes;
    /**
     * 
     * @type {Comment}
     * @memberof Proposal
     */
    comments?: Comment;
}
/**
 * 
 * @export
 * @enum {string}
 */
export enum ProposalStatus {
    Draft = 'DRAFT',
    Published = 'PUBLISHED',
    Accepted = 'ACCEPTED',
    Rejected = 'REJECTED',
    ChangeRequested = 'CHANGE_REQUESTED',
    Hidden = 'HIDDEN'
}

/**
 * 
 * @export
 * @interface Translation
 */
export interface Translation {
    /**
     * RFC 5646
     * @type {string}
     * @memberof Translation
     */
    language?: string;
    /**
     * 
     * @type {string}
     * @memberof Translation
     */
    template?: string;
    /**
     * 
     * @type {Project}
     * @memberof Translation
     */
    formatting?: Project;
    /**
     * 
     * @type {number}
     * @memberof Translation
     */
    proposalId?: number;
}
/**
 * 
 * @export
 * @interface Votes
 */
export interface Votes {
    /**
     * List of user UUIDs voted up
     * @type {Array<string>}
     * @memberof Votes
     */
    up?: Array<string>;
    /**
     * List of user UUIDs voted down
     * @type {Array<string>}
     * @memberof Votes
     */
    down?: Array<string>;
}

/**
 * PhraseApi - axios parameter creator
 * @export
 */
export const PhraseApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Delete a `Phrase` by its `phraseId`.
         * @param {number} phraseId The &#x60;Phrase&#x60; id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        phrasePhraseIdDelete: async (phraseId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'phraseId' is not null or undefined
            assertParamExists('phrasePhraseIdDelete', 'phraseId', phraseId)
            const localVarPath = `/phrase/{phraseId}`
                .replace(`{${"phraseId"}}`, encodeURIComponent(String(phraseId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets a `Phrase` by its `phraseId`.
         * @param {number} phraseId The &#x60;Phrase&#x60; id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        phrasePhraseIdGet: async (phraseId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'phraseId' is not null or undefined
            assertParamExists('phrasePhraseIdGet', 'phraseId', phraseId)
            const localVarPath = `/phrase/{phraseId}`
                .replace(`{${"phraseId"}}`, encodeURIComponent(String(phraseId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a `Phrase` based on its `phraseId`.
         * @param {number} phraseId The &#x60;Phrase&#x60; id
         * @param {UNKNOWN_BASE_TYPE} uNKNOWNBASETYPE 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        phrasePhraseIdPatch: async (phraseId: number, uNKNOWNBASETYPE: UNKNOWN_BASE_TYPE, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'phraseId' is not null or undefined
            assertParamExists('phrasePhraseIdPatch', 'phraseId', phraseId)
            // verify required parameter 'uNKNOWNBASETYPE' is not null or undefined
            assertParamExists('phrasePhraseIdPatch', 'uNKNOWNBASETYPE', uNKNOWNBASETYPE)
            const localVarPath = `/phrase/{phraseId}`
                .replace(`{${"phraseId"}}`, encodeURIComponent(String(phraseId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(uNKNOWNBASETYPE, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a `Phrase`.
         * @param {UNKNOWN_BASE_TYPE} uNKNOWNBASETYPE 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        phrasePost: async (uNKNOWNBASETYPE: UNKNOWN_BASE_TYPE, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'uNKNOWNBASETYPE' is not null or undefined
            assertParamExists('phrasePost', 'uNKNOWNBASETYPE', uNKNOWNBASETYPE)
            const localVarPath = `/phrase`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(uNKNOWNBASETYPE, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PhraseApi - functional programming interface
 * @export
 */
export const PhraseApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PhraseApiAxiosParamCreator(configuration)
    return {
        /**
         * Delete a `Phrase` by its `phraseId`.
         * @param {number} phraseId The &#x60;Phrase&#x60; id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async phrasePhraseIdDelete(phraseId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.phrasePhraseIdDelete(phraseId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Gets a `Phrase` by its `phraseId`.
         * @param {number} phraseId The &#x60;Phrase&#x60; id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async phrasePhraseIdGet(phraseId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Phrase>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.phrasePhraseIdGet(phraseId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update a `Phrase` based on its `phraseId`.
         * @param {number} phraseId The &#x60;Phrase&#x60; id
         * @param {UNKNOWN_BASE_TYPE} uNKNOWNBASETYPE 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async phrasePhraseIdPatch(phraseId: number, uNKNOWNBASETYPE: UNKNOWN_BASE_TYPE, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.phrasePhraseIdPatch(phraseId, uNKNOWNBASETYPE, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create a `Phrase`.
         * @param {UNKNOWN_BASE_TYPE} uNKNOWNBASETYPE 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async phrasePost(uNKNOWNBASETYPE: UNKNOWN_BASE_TYPE, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.phrasePost(uNKNOWNBASETYPE, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PhraseApi - factory interface
 * @export
 */
export const PhraseApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PhraseApiFp(configuration)
    return {
        /**
         * Delete a `Phrase` by its `phraseId`.
         * @param {number} phraseId The &#x60;Phrase&#x60; id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        phrasePhraseIdDelete(phraseId: number, options?: any): AxiosPromise<void> {
            return localVarFp.phrasePhraseIdDelete(phraseId, options).then((request) => request(axios, basePath));
        },
        /**
         * Gets a `Phrase` by its `phraseId`.
         * @param {number} phraseId The &#x60;Phrase&#x60; id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        phrasePhraseIdGet(phraseId: number, options?: any): AxiosPromise<Phrase> {
            return localVarFp.phrasePhraseIdGet(phraseId, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a `Phrase` based on its `phraseId`.
         * @param {number} phraseId The &#x60;Phrase&#x60; id
         * @param {UNKNOWN_BASE_TYPE} uNKNOWNBASETYPE 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        phrasePhraseIdPatch(phraseId: number, uNKNOWNBASETYPE: UNKNOWN_BASE_TYPE, options?: any): AxiosPromise<void> {
            return localVarFp.phrasePhraseIdPatch(phraseId, uNKNOWNBASETYPE, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a `Phrase`.
         * @param {UNKNOWN_BASE_TYPE} uNKNOWNBASETYPE 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        phrasePost(uNKNOWNBASETYPE: UNKNOWN_BASE_TYPE, options?: any): AxiosPromise<void> {
            return localVarFp.phrasePost(uNKNOWNBASETYPE, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PhraseApi - object-oriented interface
 * @export
 * @class PhraseApi
 * @extends {BaseAPI}
 */
export class PhraseApi extends BaseAPI {
    /**
     * Delete a `Phrase` by its `phraseId`.
     * @param {number} phraseId The &#x60;Phrase&#x60; id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PhraseApi
     */
    public phrasePhraseIdDelete(phraseId: number, options?: any) {
        return PhraseApiFp(this.configuration).phrasePhraseIdDelete(phraseId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Gets a `Phrase` by its `phraseId`.
     * @param {number} phraseId The &#x60;Phrase&#x60; id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PhraseApi
     */
    public phrasePhraseIdGet(phraseId: number, options?: any) {
        return PhraseApiFp(this.configuration).phrasePhraseIdGet(phraseId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update a `Phrase` based on its `phraseId`.
     * @param {number} phraseId The &#x60;Phrase&#x60; id
     * @param {UNKNOWN_BASE_TYPE} uNKNOWNBASETYPE 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PhraseApi
     */
    public phrasePhraseIdPatch(phraseId: number, uNKNOWNBASETYPE: UNKNOWN_BASE_TYPE, options?: any) {
        return PhraseApiFp(this.configuration).phrasePhraseIdPatch(phraseId, uNKNOWNBASETYPE, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a `Phrase`.
     * @param {UNKNOWN_BASE_TYPE} uNKNOWNBASETYPE 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PhraseApi
     */
    public phrasePost(uNKNOWNBASETYPE: UNKNOWN_BASE_TYPE, options?: any) {
        return PhraseApiFp(this.configuration).phrasePost(uNKNOWNBASETYPE, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ProjectApi - axios parameter creator
 * @export
 */
export const ProjectApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Gets a translation using the project id and the key
         * @param {number} projectId The &#x60;Project&#x60; id
         * @param {string} key The translation key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTranslationByProjectAndKey: async (projectId: number, key: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('getTranslationByProjectAndKey', 'projectId', projectId)
            // verify required parameter 'key' is not null or undefined
            assertParamExists('getTranslationByProjectAndKey', 'key', key)
            const localVarPath = `/project/{projectId}/translation/{key}`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)))
                .replace(`{${"key"}}`, encodeURIComponent(String(key)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a `Project`.
         * @param {UNKNOWN_BASE_TYPE} uNKNOWNBASETYPE 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectPost: async (uNKNOWNBASETYPE: UNKNOWN_BASE_TYPE, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'uNKNOWNBASETYPE' is not null or undefined
            assertParamExists('projectPost', 'uNKNOWNBASETYPE', uNKNOWNBASETYPE)
            const localVarPath = `/project`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(uNKNOWNBASETYPE, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes a `Project` by its project id.
         * @param {number} projectId The &#x60;Project&#x60; id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectProjectIdDelete: async (projectId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('projectProjectIdDelete', 'projectId', projectId)
            const localVarPath = `/project/{projectId}`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets a `project` by it\'s project id.
         * @param {number} projectId The &#x60;Project&#x60; id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectProjectIdGet: async (projectId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('projectProjectIdGet', 'projectId', projectId)
            const localVarPath = `/project/{projectId}`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates a `Project` by it\'s project id.
         * @param {number} projectId The &#x60;Project&#x60; id
         * @param {UNKNOWN_BASE_TYPE} uNKNOWNBASETYPE 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectProjectIdPatch: async (projectId: number, uNKNOWNBASETYPE: UNKNOWN_BASE_TYPE, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('projectProjectIdPatch', 'projectId', projectId)
            // verify required parameter 'uNKNOWNBASETYPE' is not null or undefined
            assertParamExists('projectProjectIdPatch', 'uNKNOWNBASETYPE', uNKNOWNBASETYPE)
            const localVarPath = `/project/{projectId}`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(uNKNOWNBASETYPE, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Searches for translations. Key-patterns can be passed to filter the results. If none was passed, all translation get returned.
         * @param {number} projectId The project id
         * @param {string} [keyPatterns] The comma separated translation key patterns
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchByPatterns: async (projectId: number, keyPatterns?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('searchByPatterns', 'projectId', projectId)
            const localVarPath = `/project/{projectId}/translation`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (keyPatterns !== undefined) {
                localVarQueryParameter['keyPatterns'] = keyPatterns;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProjectApi - functional programming interface
 * @export
 */
export const ProjectApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProjectApiAxiosParamCreator(configuration)
    return {
        /**
         * Gets a translation using the project id and the key
         * @param {number} projectId The &#x60;Project&#x60; id
         * @param {string} key The translation key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTranslationByProjectAndKey(projectId: number, key: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Phrase>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTranslationByProjectAndKey(projectId, key, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create a `Project`.
         * @param {UNKNOWN_BASE_TYPE} uNKNOWNBASETYPE 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projectPost(uNKNOWNBASETYPE: UNKNOWN_BASE_TYPE, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.projectPost(uNKNOWNBASETYPE, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Deletes a `Project` by its project id.
         * @param {number} projectId The &#x60;Project&#x60; id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projectProjectIdDelete(projectId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.projectProjectIdDelete(projectId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Gets a `project` by it\'s project id.
         * @param {number} projectId The &#x60;Project&#x60; id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projectProjectIdGet(projectId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Project>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.projectProjectIdGet(projectId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Updates a `Project` by it\'s project id.
         * @param {number} projectId The &#x60;Project&#x60; id
         * @param {UNKNOWN_BASE_TYPE} uNKNOWNBASETYPE 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projectProjectIdPatch(projectId: number, uNKNOWNBASETYPE: UNKNOWN_BASE_TYPE, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.projectProjectIdPatch(projectId, uNKNOWNBASETYPE, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Searches for translations. Key-patterns can be passed to filter the results. If none was passed, all translation get returned.
         * @param {number} projectId The project id
         * @param {string} [keyPatterns] The comma separated translation key patterns
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchByPatterns(projectId: number, keyPatterns?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse200>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.searchByPatterns(projectId, keyPatterns, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ProjectApi - factory interface
 * @export
 */
export const ProjectApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProjectApiFp(configuration)
    return {
        /**
         * Gets a translation using the project id and the key
         * @param {number} projectId The &#x60;Project&#x60; id
         * @param {string} key The translation key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTranslationByProjectAndKey(projectId: number, key: string, options?: any): AxiosPromise<Phrase> {
            return localVarFp.getTranslationByProjectAndKey(projectId, key, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a `Project`.
         * @param {UNKNOWN_BASE_TYPE} uNKNOWNBASETYPE 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectPost(uNKNOWNBASETYPE: UNKNOWN_BASE_TYPE, options?: any): AxiosPromise<void> {
            return localVarFp.projectPost(uNKNOWNBASETYPE, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes a `Project` by its project id.
         * @param {number} projectId The &#x60;Project&#x60; id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectProjectIdDelete(projectId: number, options?: any): AxiosPromise<void> {
            return localVarFp.projectProjectIdDelete(projectId, options).then((request) => request(axios, basePath));
        },
        /**
         * Gets a `project` by it\'s project id.
         * @param {number} projectId The &#x60;Project&#x60; id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectProjectIdGet(projectId: number, options?: any): AxiosPromise<Project> {
            return localVarFp.projectProjectIdGet(projectId, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates a `Project` by it\'s project id.
         * @param {number} projectId The &#x60;Project&#x60; id
         * @param {UNKNOWN_BASE_TYPE} uNKNOWNBASETYPE 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectProjectIdPatch(projectId: number, uNKNOWNBASETYPE: UNKNOWN_BASE_TYPE, options?: any): AxiosPromise<void> {
            return localVarFp.projectProjectIdPatch(projectId, uNKNOWNBASETYPE, options).then((request) => request(axios, basePath));
        },
        /**
         * Searches for translations. Key-patterns can be passed to filter the results. If none was passed, all translation get returned.
         * @param {number} projectId The project id
         * @param {string} [keyPatterns] The comma separated translation key patterns
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchByPatterns(projectId: number, keyPatterns?: string, options?: any): AxiosPromise<InlineResponse200> {
            return localVarFp.searchByPatterns(projectId, keyPatterns, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProjectApi - object-oriented interface
 * @export
 * @class ProjectApi
 * @extends {BaseAPI}
 */
export class ProjectApi extends BaseAPI {
    /**
     * Gets a translation using the project id and the key
     * @param {number} projectId The &#x60;Project&#x60; id
     * @param {string} key The translation key
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectApi
     */
    public getTranslationByProjectAndKey(projectId: number, key: string, options?: any) {
        return ProjectApiFp(this.configuration).getTranslationByProjectAndKey(projectId, key, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a `Project`.
     * @param {UNKNOWN_BASE_TYPE} uNKNOWNBASETYPE 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectApi
     */
    public projectPost(uNKNOWNBASETYPE: UNKNOWN_BASE_TYPE, options?: any) {
        return ProjectApiFp(this.configuration).projectPost(uNKNOWNBASETYPE, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Deletes a `Project` by its project id.
     * @param {number} projectId The &#x60;Project&#x60; id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectApi
     */
    public projectProjectIdDelete(projectId: number, options?: any) {
        return ProjectApiFp(this.configuration).projectProjectIdDelete(projectId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Gets a `project` by it\'s project id.
     * @param {number} projectId The &#x60;Project&#x60; id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectApi
     */
    public projectProjectIdGet(projectId: number, options?: any) {
        return ProjectApiFp(this.configuration).projectProjectIdGet(projectId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates a `Project` by it\'s project id.
     * @param {number} projectId The &#x60;Project&#x60; id
     * @param {UNKNOWN_BASE_TYPE} uNKNOWNBASETYPE 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectApi
     */
    public projectProjectIdPatch(projectId: number, uNKNOWNBASETYPE: UNKNOWN_BASE_TYPE, options?: any) {
        return ProjectApiFp(this.configuration).projectProjectIdPatch(projectId, uNKNOWNBASETYPE, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Searches for translations. Key-patterns can be passed to filter the results. If none was passed, all translation get returned.
     * @param {number} projectId The project id
     * @param {string} [keyPatterns] The comma separated translation key patterns
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectApi
     */
    public searchByPatterns(projectId: number, keyPatterns?: string, options?: any) {
        return ProjectApiFp(this.configuration).searchByPatterns(projectId, keyPatterns, options).then((request) => request(this.axios, this.basePath));
    }
}


